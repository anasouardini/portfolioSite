---
import Icon from 'astro-icon';
import {Image, Picture} from '@astrojs/image/components';
// type sharedT = {hostingAddress: string, sourceCodeAddress: string, mediaAddress: string}
const shared = {
    hostingAddress: 'anasouardini.online',
    sourceCodeAddress: 'https://wwww.github.com/segfaulty1',
    mediaAddress: '/media/projectsPreview',
};
const genLinks = (projectName)=>{
  return {
    mediaLink: `${shared.mediaAddress}/${projectName}.png`,
    previewLink: `https://${projectName}.${shared.hostingAddress}`,
    sourceCodeLink: `${shared.sourceCodeAddress}/${projectName}`,
  }
}

type projectItemsT = {
    card: {
        width: number;
        aspectRatio: string;
        mediaLink: string;
        previewLink: string;
        sourceCodeLink: string;
    };
    details: {
        title: string;
        idea: string;
        obstacles: string[][];
        tools: string[];
    };
}[];
const projectItems: projectItemsT = [
    {
        card: {
            width: 400,
            aspectRatio: '1:1',
            ...genLinks('snipshare'),
        },
        details: {
            title: 'SnipShare: snippet sharing',
            idea: `An app for sharing pieces of code with others, it also has the feature of granting access of one's
                  account to another person which envolves a bit of authentication and authorization.`,
            obstacles: [
                [
                    "I couldn't get google Auth to work",
                    "I've just gone through their documentation despite it's longivity."
                ],
                [
                    "I was losing a lot of time on tiny mistakes that would require a lot of debugging.",
                    "I introduced TypeScript to the project which reduced the effectiveness of those pain pionts"
                ],
                [
                    `I got slowed down by the fact that I couldn't revert back to some old code; my git commits
                    weren't professional`,
                    `I learned how to write a proper git commit, after which I got really
                    confortable with browsing git's history whenever I needed.`
                ],
                // [
                //     `I had to spend a lot of time convincing other people to use this project in order to give me feedback.`,
                //     `I overcame this problem thanks to a very kind person on discord, who recommended I add a way to easily
                //     navigate between accounts and default values in forms so that they're not required to think too much about
                //     it, etc. It worked like charm, people actually enjoyed using it.`
                // ]
                      ],
            tools: [
                    'html', 'css', 'tailwind', 'js', 'react', 'react-icons', 'react-auto-animate', 'monaco editor',
                    'nodejs', 'expressjs', 'axios', 'bcrypt', 'multer', 'passportjs', 'jwt', 'google Auth2.0', 'SSE', 'zod',
                    'mysql', 'vite'
                  ],
        },
    },
    {
      card: {
          width: 400,
          aspectRatio: '1:1',
          ...genLinks('smartteam'),
      },
      details: {
        title: 'SmartTeam: for managing teams/projects',
        idea: `I've made a really typical project (todo app) but I wasn't satisfied with it due to its simplicity,
              after which I decided to make another complex version of it, instead of just managing tasks, this one
              is about managing tasks within projects within groups of projects.`,
        obstacles: [
          [
            `The structure of the database was a bit comfusing and I couldn't wrap my head around it.`,
            `I used a whiteboard tool to write my ideas down and compare them to filter down the worst ones
              and start working as fast as possible.`
          ],
          [
            `I got really stuck trying to hack around the inherintly restrictive nature of the REST protocol.`,
            `Sometimes, standards can get in your way, and you can't help it but to take the non-standard route.`
          ],
          [
            `I got to a point where I couldn't get any further with the project due to the complexity cumulated over time.`,
            `Refactoring was the only solution I could think about, I realized that I should've been refactoring more frequently.`
          ]
        ],
        tools: [
                'html', 'css', 'tailwind', 'js', 'react', 'react-icons', 'react-query', 'react-table', 'typescript',
                'nodejs', 'expressjs', 'axios', 'Oauth(google & github)', 'jwt', 'Bcrypt', 'nodemailer', 'mysql', 'vite'
                ],
      },
    },
    {
      card: {
        width: 400,
        aspectRatio: '1:1',
        ...genLinks('algolizer'),
      },
      details: {
          title: 'Algolizer: algorithms visualizer',
          idea: `The project highlights the "performance" difference between algorithms and data structues.
                 It makes it easier to spot those differences and understand that it's not just black and white
                 and it's not always about saving CPU cycles.`,
          obstacles: [
            [
              `I couldn't get each algorithm to run in a separate thread/web worker without spending too much time on this.`,
              `I just re-invented the wheel, by writing a really simple "context switcher".`
            ]
          ],
          tools: ['html', 'css', 'tailwind', 'js', 'react', 'typescript', 'react-chartjs-2'],
      },
    },
];
---

<section
    aria-label="projects"
    id="portfolio"
    class="text-slate-50 pt-[6rem] px-main xs>:px-4 overflow-y-hidden"
>
    <h2
        class={`text-center capitalize text-2xl relative
              before:absolute
              before:border-b-4 before:border-b-primary
              before:w-[2.1rem] before:h-[48px]`}
    >
        My <span class="text-primary">portfolio</span>
    </h2>

    {
        projectItems.map((item) => {
            return (
                <>
                    <div
                        aria-label="project box"
                        class="flex flex-wrap justify-center gap-6"
                    >
                        <div
                            aria-label="project preview"
                            class="grow basis-0 flex flex-col items-center mt-[3rem] animate-loadFromUp"
                        >
                            <Picture
                                class="min-w-[280px] sxs>:min-w-0"
                                widths={[400, 600, 800]}
                                aspectRatio={item.card.aspectRatio}
                                formats={['webp']}
                                src={`${item.card.mediaLink}`}
                                alt="project image"
                            />

                            {/*check project buttons*/}
                            <div
                                aria-label="project buttons"
                                class="w-full flex-wrap flex justify-around gap-4 mt-5"
                            >
                                {[
                                    // ['preview', 'ic:round-remove-red-eye', item.card.previewLink],
                                    [
                                        'preview',
                                        'ic:twotone-remove-red-eye',
                                        item.card.previewLink,
                                        <svg viewBox="0 0 24 24" class="w-8 mr-1 inline group-hover:scale-[1.2] duration-300"
                                            astro-icon="ic:twotone-remove-red-eye">
                                            <path fill="currentColor"
                                                d="M12 6.5A9.77 9.77 0 0 0 3.18 12c1.65 3.37 5.02 5.5 8.82 5.5s7.17-2.13 8.82-5.5A9.77 9.77 0 0 0 12 6.5zm0 10c-2.48 0-4.5-2.02-4.5-4.5S9.52 7.5 12 7.5s4.5 2.02 4.5 4.5-2.02 4.5-4.5 4.5z"
                                                opacity=".3" />
                                            <path fill="currentColor"
                                                d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zm0 13A9.77 9.77 0 0 1 3.18 12C4.83 8.63 8.21 6.5 12 6.5s7.17 2.13 8.82 5.5A9.77 9.77 0 0 1 12 17.5zm0-10c-2.48 0-4.5 2.02-4.5 4.5s2.02 4.5 4.5 4.5 4.5-2.02 4.5-4.5-2.02-4.5-4.5-4.5zm0 7a2.5 2.5 0 0 1 0-5 2.5 2.5 0 0 1 0 5z" />
                                        </svg>
                                    ],
                                    [
                                        'code', 
                                        'ph:code',
                                        item.card.sourceCodeLink,
                                        <svg
                                            viewBox="0 0 256 256"
                                            class="w-8 mr-1 inline group-hover:scale-[1.2] duration-300"
                                            astro-icon="ph:code"
                                        >
                                            <path
                                                fill="currentColor"
                                                d="M69.1 94.1 28.5 128l40.6 33.9a7.9 7.9 0 0 1 1.1 11.2A8.1 8.1 0 0 1 64 176a7.7 7.7 0 0 1-5.1-1.9l-48-40a7.9 7.9 0 0 1 0-12.2l48-40a8 8 0 1 1 10.2 12.2zm176 27.8-48-40a8 8 0 0 0-10.2 12.2l40.6 33.9-40.6 33.9A8 8 0 0 0 192 176a7.7 7.7 0 0 0 5.1-1.9l48-40a7.9 7.9 0 0 0 0-12.2zm-82.4-89.4a7.9 7.9 0 0 0-10.2 4.8l-64 176a7.9 7.9 0 0 0 4.8 10.2 8.6 8.6 0 0 0 2.7.5 7.9 7.9 0 0 0 7.5-5.3l64-176a7.9 7.9 0 0 0-4.8-10.2z"
                                            />
                                        </svg>,
                                    ]
                                ].map((button) => {
                                    return (
                                        <a
                                            href={button[2]}
                                            class="w-max text-primary border-[1px] border-primary px-3 py-1 rounded-xl
                                            subtleHoverSlider group"
                                        >
                                        <!--
                                            <Icon
                                                name={button[1]}
                                                class="w-8 mr-1 inline group-hover:scale-[1.2] duration-300"
                                            />
                                        -->
                                        {button[3]}
                                            {button[0]}
                                        </a>
                                    );
                                })}
                            </div>
                        </div>

                        <div
                            aria-label="project details"
                            class="grow basis-0 min-w-[250px] mt-[3rem] animate-loadFromDown"
                        >
                            <h3 class="capitalize mb-2 text-xl">{item.details.title}</h3>
                            <p class="first-letter:uppercase text-gray-400 max-w-md">
                                {item.details.idea}
                            </p>
                            <h4 class="capitalize text-lg mt-3 mb-2">
                                Obstacles I Faced
                            </h4>
                            <ul class="ml-3">
                                {item.details.obstacles.map((obs) => {
                                    return (
                                        <li>
                                            <h5 class="capitalize">
                                                <span class="text-xl text-primary mr-2">
                                                    ⚡
                                                </span>
                                                {obs[0]}
                                            </h5>
                                            <p class="ml-3 text-gray-400 first-letter:uppercase">
                                                {obs[1]}
                                            </p>
                                        </li>
                                    );
                                })}
                            </ul>

                            <h4 class="capitalize text-lg mt-3 mb-2">Tools Used</h4>
                            <ul class="flex flex-wrap gap-3 py-2 max-w-lg">
                                {item.details.tools.map((tool) => {
                                    return (
                                        <li class="text-gray-400 border-primary border-[1px] rounded-xl px-3 hover:rotate-[2deg] hover:scale-[1.1] duration-300">
                                            {tool}
                                        </li>
                                    );
                                })}
                            </ul>
                        </div>
                    </div>
                </>
            );
        })
    }
</section>
